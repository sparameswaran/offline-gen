
jobs:
- name: offline-gen-kickoff
  plan:
  - aggregate:
    - get: offline-gen-pipeline
    - get: target-pipeline

  - config:
      image_resource:
        source: {repository: nsxedgegen/offline-gen-worker}
        type: docker-image
      inputs:
      - name: offline-gen-pipeline
      - name: target-pipeline
      outputs:
      - name: offline-gen-output
      platform: linux
      run:
        args:
        - -exc
        - |
            echo ${OFFLINE_GEN_YAML_PARAM} > offline-gen-output/offline-gen-params.yml
            echo ${PIPELINE_YAML_PARAM} > offline-gen-output/pipeline-params.yml
            python offline-gen-pipeline/offline-generator.py -kickoff target-pipeline offline-gen-output/offline-gen-params.yml;
            mv kickoff-*.yml offline-gen-output/
            cd offline-gen-output/
            for file in $(ls *params.yml)
            do
              file_basename=$(basename $file .yml)
              mv ${file} ${file_basename}-1.0.yml
            done
        path: /bin/bash
    task: kickoff-offline-gen
    params:
      OFFLINE_GEN_YAML_PARAM: ((offline_gen_yaml_input_params))
      PIPELINE_YAML_PARAM: ((pipeline_yaml_input_params))
  - aggregate:
    - put: offline-gen-param-file
      params: { file: offline-gen-output/offline-gen-params*.yml }
    - put: pipeline-param-file
      params: { file: offline-gen-output/pipeline-params*.yml }
    - put: kickoff-offline-gen-output-pipeline
      params: { file: offline-gen-output/kickoff-*.yml }

- name: start-full-generation-for-((target_pipeline_name))
  plan:
  - aggregate:
    - get: pipeline-param-file
    - get: offline-gen-param-file
    - get: kickoff-offline-gen-output-pipeline
      trigger: true
  - put: offline-gen-full-generation-pipeline
    params:
      #pipelines_file: path/to/pipelines/file
      pipelines:
      - name: start-full-generation-for-((target_pipeline_name))-pipeline
        team: ((concourse_team))
        config_file: kickoff-offline-gen-output-pipeline/*.yml
        vars_files:
        - offline-gen-param-file/offline-gen-param*
        - pipeline-param-file/pipeline-param*

resource_types:
- name: concourse-pipeline
  type: docker-image
  source:
    repository: concourse/concourse-pipeline-resource


resources:
- name: offline-gen-full-generation-pipeline
  type: concourse-pipeline
  source:
    insecure: "true"
    teams:
    - name: ((concourse_team))
      username: ((concourse_username))
      password: ((concourse_password))


- name: offline-gen-pipeline
  type: git
  source:
    branch: master
    uri: https://github.com/sparameswaran/offline-gen.git

- name: target-pipeline
  type: git
  source:
    branch: ((target_pipeline_branch))
    uri: ((target_pipeline_uri))

- name: offline-gen-param-file
  type: s3
  source:
    access_key_id: ((offline_gen_s3_access_key_id))
    bucket: ((offline_gen_s3_bucket))
    endpoint: ((offline_gen_s3_endpoint))
    secret_access_key: ((offline_gen_s3_secret_access_key))
    regexp: ((run_name))/resources/offline-gen/offline-gen-params-*(.*).yml

- name: pipeline-param-file
  type: s3
  source:
    access_key_id: ((offline_gen_s3_access_key_id))
    bucket: ((offline_gen_s3_bucket))
    endpoint: ((offline_gen_s3_endpoint))
    secret_access_key: ((offline_gen_s3_secret_access_key))
    regexp: ((run_name))/resources/offline-gen/pipeline-params-*(.*).yml

- name: kickoff-offline-gen-output-pipeline
  type: s3
  source:
    access_key_id: ((offline_gen_s3_access_key_id))
    bucket: ((offline_gen_s3_bucket))
    endpoint: ((offline_gen_s3_endpoint))
    secret_access_key: ((offline_gen_s3_secret_access_key))
    regexp: ((run_name))/resources/offline-gen/kickoff-*(.*).yml
