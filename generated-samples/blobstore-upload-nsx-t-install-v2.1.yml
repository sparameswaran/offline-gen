groups:
- jobs: [parallel-kickoff]
  name: parallel-kickoff
- jobs: [kickoff-nsx-t-gen-pipeline-upload-to-blobstore, kickoff-nsxt-ansible-upload-to-blobstore,
    kickoff-nsx-mgr-ova-upload-to-blobstore, kickoff-nsx-ctrl-ova-upload-to-blobstore,
    kickoff-nsx-edge-ova-upload-to-blobstore, kickoff-ovftool-upload-to-blobstore,
    kickoff-nsxedgegen-nsx-t-gen-worker-v2.1-docker-upload-to-blobstore]
  name: individual-kickoff
jobs:
- name: parallel-kickoff
  plan:
  - aggregate:
    - {get: input-git-nsx-t-gen-pipeline}
    - {get: input-git-nsxt-ansible}
    - {get: input-file-nsx-mgr-ova}
    - {get: input-file-nsx-ctrl-ova}
    - {get: input-file-nsx-edge-ova}
    - {get: input-file-ovftool}
    - get: input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker
      params: {rootfs: true}
  - aggregate:
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-git-nsx-t-gen-pipeline}
        outputs:
        - {name: output-git-nsx-t-gen-pipeline}
        platform: linux
        run:
          args: [-ec, 'cd input-git-nsx-t-gen-pipeline

              tar cfz ../output-git-nsx-t-gen-pipeline/nsx-t-gen-pipeline-tarball.tgz
              .

              cd ..

              ls -l output-git-nsx-t-gen-pipeline

              ']
          path: /bin/bash
      task: prepare-git-nsx-t-gen-pipeline-bit-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-git-nsxt-ansible}
        outputs:
        - {name: output-git-nsxt-ansible}
        platform: linux
        run:
          args: [-ec, 'cd input-git-nsxt-ansible

              tar cfz ../output-git-nsxt-ansible/nsxt-ansible-tarball.tgz .

              cd ..

              ls -l output-git-nsxt-ansible

              ']
          path: /bin/bash
      task: prepare-git-nsxt-ansible-bit-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-file-nsx-mgr-ova}
        outputs:
        - {name: output-file-nsx-mgr-ova}
        platform: linux
        run:
          args: [-ec, "echo \"Copying nsx-mgr-ova bits\";\nno_of_entries=$(ls input-file-nsx-mgr-ova\
              \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-nsx-mgr-ova;\n\
              \  tar cfz ../output-file-nsx-mgr-ova/nsx-mgr-ova-tarball-1.0.tgz .\n\
              \  cd ..\nelse\n  file_name=$(ls input-file-nsx-mgr-ova/)\n  mv input-file-nsx-mgr-ova/*\
              \ output-file-nsx-mgr-ova/nsx-mgr-ova-${file_name}-1.0\nfi\nls -l output-file-nsx-mgr-ova\n"]
          path: /bin/bash
      task: prepare-nsx-mgr-ova-bit-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-file-nsx-ctrl-ova}
        outputs:
        - {name: output-file-nsx-ctrl-ova}
        platform: linux
        run:
          args: [-ec, "echo \"Copying nsx-ctrl-ova bits\";\nno_of_entries=$(ls input-file-nsx-ctrl-ova\
              \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-nsx-ctrl-ova;\n\
              \  tar cfz ../output-file-nsx-ctrl-ova/nsx-ctrl-ova-tarball-1.0.tgz\
              \ .\n  cd ..\nelse\n  file_name=$(ls input-file-nsx-ctrl-ova/)\n  mv\
              \ input-file-nsx-ctrl-ova/* output-file-nsx-ctrl-ova/nsx-ctrl-ova-${file_name}-1.0\n\
              fi\nls -l output-file-nsx-ctrl-ova\n"]
          path: /bin/bash
      task: prepare-nsx-ctrl-ova-bit-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-file-nsx-edge-ova}
        outputs:
        - {name: output-file-nsx-edge-ova}
        platform: linux
        run:
          args: [-ec, "echo \"Copying nsx-edge-ova bits\";\nno_of_entries=$(ls input-file-nsx-edge-ova\
              \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-nsx-edge-ova;\n\
              \  tar cfz ../output-file-nsx-edge-ova/nsx-edge-ova-tarball-1.0.tgz\
              \ .\n  cd ..\nelse\n  file_name=$(ls input-file-nsx-edge-ova/)\n  mv\
              \ input-file-nsx-edge-ova/* output-file-nsx-edge-ova/nsx-edge-ova-${file_name}-1.0\n\
              fi\nls -l output-file-nsx-edge-ova\n"]
          path: /bin/bash
      task: prepare-nsx-edge-ova-bit-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-file-ovftool}
        outputs:
        - {name: output-file-ovftool}
        platform: linux
        run:
          args: [-ec, "echo \"Copying ovftool bits\";\nno_of_entries=$(ls input-file-ovftool\
              \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-ovftool;\n\
              \  tar cfz ../output-file-ovftool/ovftool-tarball-1.0.tgz .\n  cd ..\n\
              else\n  file_name=$(ls input-file-ovftool/)\n  mv input-file-ovftool/*\
              \ output-file-ovftool/ovftool-${file_name}-1.0\nfi\nls -l output-file-ovftool\n"]
          path: /bin/bash
      task: prepare-ovftool-bit-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker}
        outputs:
        - {name: output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker}
        platform: linux
        run:
          args: [-ec, 'echo "Exporting nsxedgegen-nsx-t-gen-worker-v2.1-docker docker
              image";

              mkdir export-directory;

              cd export-directory;

              cp ../input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/metadata.json
              .;

              mkdir rootfs && cd rootfs;

              cp ../../input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/rootfs.tar
              ..;

              tar -xf ../rootfs.tar --exclude="dev/*";

              echo "Packaging nsxedgegen-nsx-t-gen-worker-v2.1-docker docker image";

              cd ..;

              rm rootfs.tar;

              tar -czf   "../output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/nsxedgegen-nsx-t-gen-worker-v2.1-docker-v2.1-docker.tgz"
              .;

              ls -l ../output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/;

              ']
          path: /bin/bash
      task: prepare-nsxedgegen-nsx-t-gen-worker-v2.1-docker-docker-image-to-export
  - aggregate:
    - params: {file: output-git-nsx-t-gen-pipeline/nsx-t-gen-pipeline-tarball.tgz}
      put: output-git-nsx-t-gen-pipeline
    - params: {file: output-git-nsxt-ansible/nsxt-ansible-tarball.tgz}
      put: output-git-nsxt-ansible
    - params: {file: output-file-nsx-mgr-ova/nsx-mgr-ova*-1.0*}
      put: output-file-nsx-mgr-ova
    - params: {file: output-file-nsx-ctrl-ova/nsx-ctrl-ova*-1.0*}
      put: output-file-nsx-ctrl-ova
    - params: {file: output-file-nsx-edge-ova/nsx-edge-ova*-1.0*}
      put: output-file-nsx-edge-ova
    - params: {file: output-file-ovftool/ovftool*-1.0*}
      put: output-file-ovftool
    - params: {file: output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/nsxedgegen-nsx-t-gen-worker-v2.1-docker*.tgz}
      put: output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker
- name: kickoff-nsx-t-gen-pipeline-upload-to-blobstore
  plan:
  - get: input-git-nsx-t-gen-pipeline
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-git-nsx-t-gen-pipeline}
      outputs:
      - {name: output-git-nsx-t-gen-pipeline}
      platform: linux
      run:
        args: [-ec, 'cd input-git-nsx-t-gen-pipeline

            tar cfz ../output-git-nsx-t-gen-pipeline/nsx-t-gen-pipeline-tarball.tgz
            .

            cd ..

            ls -l output-git-nsx-t-gen-pipeline

            ']
        path: /bin/bash
    task: prepare-git-nsx-t-gen-pipeline-bit-to-export
  - params: {file: output-git-nsx-t-gen-pipeline/nsx-t-gen-pipeline-tarball.tgz}
    put: output-git-nsx-t-gen-pipeline
- name: kickoff-nsxt-ansible-upload-to-blobstore
  plan:
  - get: input-git-nsxt-ansible
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-git-nsxt-ansible}
      outputs:
      - {name: output-git-nsxt-ansible}
      platform: linux
      run:
        args: [-ec, 'cd input-git-nsxt-ansible

            tar cfz ../output-git-nsxt-ansible/nsxt-ansible-tarball.tgz .

            cd ..

            ls -l output-git-nsxt-ansible

            ']
        path: /bin/bash
    task: prepare-git-nsxt-ansible-bit-to-export
  - params: {file: output-git-nsxt-ansible/nsxt-ansible-tarball.tgz}
    put: output-git-nsxt-ansible
- name: kickoff-nsx-mgr-ova-upload-to-blobstore
  plan:
  - {get: input-file-nsx-mgr-ova}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-file-nsx-mgr-ova}
      outputs:
      - {name: output-file-nsx-mgr-ova}
      platform: linux
      run:
        args: [-ec, "echo \"Copying nsx-mgr-ova bits\";\nno_of_entries=$(ls input-file-nsx-mgr-ova\
            \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-nsx-mgr-ova;\n\
            \  tar cfz ../output-file-nsx-mgr-ova/nsx-mgr-ova-tarball-1.0.tgz .\n\
            \  cd ..\nelse\n  file_name=$(ls input-file-nsx-mgr-ova/)\n  mv input-file-nsx-mgr-ova/*\
            \ output-file-nsx-mgr-ova/nsx-mgr-ova-${file_name}-1.0\nfi\nls -l output-file-nsx-mgr-ova\n"]
        path: /bin/bash
    task: prepare-nsx-mgr-ova-bit-to-export
  - params: {file: output-file-nsx-mgr-ova/nsx-mgr-ova*-1.0*}
    put: output-file-nsx-mgr-ova
- name: kickoff-nsx-ctrl-ova-upload-to-blobstore
  plan:
  - {get: input-file-nsx-ctrl-ova}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-file-nsx-ctrl-ova}
      outputs:
      - {name: output-file-nsx-ctrl-ova}
      platform: linux
      run:
        args: [-ec, "echo \"Copying nsx-ctrl-ova bits\";\nno_of_entries=$(ls input-file-nsx-ctrl-ova\
            \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-nsx-ctrl-ova;\n\
            \  tar cfz ../output-file-nsx-ctrl-ova/nsx-ctrl-ova-tarball-1.0.tgz .\n\
            \  cd ..\nelse\n  file_name=$(ls input-file-nsx-ctrl-ova/)\n  mv input-file-nsx-ctrl-ova/*\
            \ output-file-nsx-ctrl-ova/nsx-ctrl-ova-${file_name}-1.0\nfi\nls -l output-file-nsx-ctrl-ova\n"]
        path: /bin/bash
    task: prepare-nsx-ctrl-ova-bit-to-export
  - params: {file: output-file-nsx-ctrl-ova/nsx-ctrl-ova*-1.0*}
    put: output-file-nsx-ctrl-ova
- name: kickoff-nsx-edge-ova-upload-to-blobstore
  plan:
  - {get: input-file-nsx-edge-ova}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-file-nsx-edge-ova}
      outputs:
      - {name: output-file-nsx-edge-ova}
      platform: linux
      run:
        args: [-ec, "echo \"Copying nsx-edge-ova bits\";\nno_of_entries=$(ls input-file-nsx-edge-ova\
            \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-nsx-edge-ova;\n\
            \  tar cfz ../output-file-nsx-edge-ova/nsx-edge-ova-tarball-1.0.tgz .\n\
            \  cd ..\nelse\n  file_name=$(ls input-file-nsx-edge-ova/)\n  mv input-file-nsx-edge-ova/*\
            \ output-file-nsx-edge-ova/nsx-edge-ova-${file_name}-1.0\nfi\nls -l output-file-nsx-edge-ova\n"]
        path: /bin/bash
    task: prepare-nsx-edge-ova-bit-to-export
  - params: {file: output-file-nsx-edge-ova/nsx-edge-ova*-1.0*}
    put: output-file-nsx-edge-ova
- name: kickoff-ovftool-upload-to-blobstore
  plan:
  - {get: input-file-ovftool}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-file-ovftool}
      outputs:
      - {name: output-file-ovftool}
      platform: linux
      run:
        args: [-ec, "echo \"Copying ovftool bits\";\nno_of_entries=$(ls input-file-ovftool\
            \ | wc -l)\nif [ $no_of_entries -ne 1 ]; then\n  cd input-file-ovftool;\n\
            \  tar cfz ../output-file-ovftool/ovftool-tarball-1.0.tgz .\n  cd ..\n\
            else\n  file_name=$(ls input-file-ovftool/)\n  mv input-file-ovftool/*\
            \ output-file-ovftool/ovftool-${file_name}-1.0\nfi\nls -l output-file-ovftool\n"]
        path: /bin/bash
    task: prepare-ovftool-bit-to-export
  - params: {file: output-file-ovftool/ovftool*-1.0*}
    put: output-file-ovftool
- name: kickoff-nsxedgegen-nsx-t-gen-worker-v2.1-docker-upload-to-blobstore
  plan:
  - get: input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker}
      outputs:
      - {name: output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker}
      platform: linux
      run:
        args: [-ec, 'echo "Exporting nsxedgegen-nsx-t-gen-worker-v2.1-docker docker
            image";

            mkdir export-directory;

            cd export-directory;

            cp ../input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/metadata.json
            .;

            mkdir rootfs && cd rootfs;

            cp ../../input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/rootfs.tar
            ..;

            tar -xf ../rootfs.tar --exclude="dev/*";

            echo "Packaging nsxedgegen-nsx-t-gen-worker-v2.1-docker docker image";

            cd ..;

            rm rootfs.tar;

            tar -czf   "../output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/nsxedgegen-nsx-t-gen-worker-v2.1-docker-v2.1-docker.tgz"
            .;

            ls -l ../output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/;

            ']
        path: /bin/bash
    task: prepare-nsxedgegen-nsx-t-gen-worker-v2.1-docker-docker-image-to-export
  - params: {file: output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker/nsxedgegen-nsx-t-gen-worker-v2.1-docker*}
    put: output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker
resource_types:
- name: file-url
  source: {repository: pivotalservices/concourse-curl-resource, tag: latest}
  type: docker-image
resources:
- name: input-git-nsx-t-gen-pipeline
  source:
    branch: nsxt-2.1
    params: {disable_git_lfs: true}
    uri: https://github.com/sparameswaran/nsx-t-gen.git
  type: git
- name: input-git-nsxt-ansible
  source: {branch: nsxt-2.1, uri: 'https://github.com/sparameswaran/nsxt-ansible'}
  type: git
- name: input-file-nsx-mgr-ova
  source: {filename: ((nsx_mgr_ova)), skip_ssl_verification: true, url: ((nsx_image_webserver))/((nsx_mgr_ova))}
  type: file-url
- name: input-file-nsx-ctrl-ova
  source: {filename: ((nsx_controller_ova)), skip_ssl_verification: true, url: ((nsx_image_webserver))/((nsx_controller_ova))}
  type: file-url
- name: input-file-nsx-edge-ova
  source: {filename: ((nsx_edge_ova)), skip_ssl_verification: true, url: ((nsx_image_webserver))/((nsx_edge_ova))}
  type: file-url
- name: input-file-ovftool
  source: {filename: ((ovftool_image)), skip_ssl_verification: true, url: ((nsx_image_webserver))/((ovftool_image))}
  type: file-url
- name: input-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker
  source: {repository: nsxedgegen/nsx-t-gen-worker, tag: v2.1}
  type: docker-image
- name: output-git-nsx-t-gen-pipeline
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/git/nsx-t-gen-pipeline-tar(.*).tgz,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-git-nsxt-ansible
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/git/nsxt-ansible-tar(.*).tgz,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-file-nsx-mgr-ova
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/file/nsx-mgr-ova-*-(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-file-nsx-ctrl-ova
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/file/nsx-ctrl-ova-*-(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-file-nsx-edge-ova
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/file/nsx-edge-ova-*-(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-file-ovftool
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/file/ovftool-*-(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-docker-nsxedgegen-nsx-t-gen-worker-v2.1-docker
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/docker/nsxedgegen-nsx-t-gen-worker-v2.1-docker.(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
