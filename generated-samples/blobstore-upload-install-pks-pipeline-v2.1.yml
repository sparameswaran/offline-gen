groups:
- jobs: [parallel-kickoff]
  name: parallel-kickoff
- jobs: [kickoff-pcf-pipelines-upload-to-blobstore, kickoff-nsx-t-ci-pipeline-upload-to-blobstore,
    kickoff-pcf-ops-manager-upload-to-blobstore, kickoff-pivotal-container-service-upload-to-blobstore,
    kickoff-pcf-pipelines-utils-upload-to-blobstore, kickoff-harbor-container-registry-upload-to-blobstore,
    kickoff-pcfnorm-rootfs-1.0.17-docker-upload-to-blobstore, kickoff-czero-cflinuxfs2-latest-docker-upload-to-blobstore,
    kickoff-czero-rootfs-latest-docker-upload-to-blobstore, kickoff-pivotalservices-pks-kubectl-latest-docker-upload-to-blobstore]
  name: individual-kickoff
jobs:
- name: parallel-kickoff
  plan:
  - aggregate:
    - {get: input-git-pcf-pipelines}
    - {get: input-git-nsx-t-ci-pipeline}
    - get: input-pivnet-non-tile-pcf-ops-manager
      params:
        globs: ['*((iaas))*']
    - get: input-tile-pivotal-container-service
      params:
        globs: ['*.pivotal']
    - {get: input-git-pcf-pipelines-utils}
    - get: input-tile-harbor-container-registry
      params:
        globs: ['*.pivotal']
    - get: input-docker-pcfnorm-rootfs-1.0.17-docker
      params: {rootfs: true}
    - get: input-docker-czero-cflinuxfs2-latest-docker
      params: {rootfs: true}
    - get: input-docker-czero-rootfs-latest-docker
      params: {rootfs: true}
    - get: input-docker-pivotalservices-pks-kubectl-latest-docker
      params: {rootfs: true}
  - aggregate:
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-git-pcf-pipelines}
        outputs:
        - {name: output-git-pcf-pipelines}
        platform: linux
        run:
          args: [-ec, 'cd input-git-pcf-pipelines

              tar cfz ../output-git-pcf-pipelines/pcf-pipelines-tarball.tgz .

              cd ..

              ls -l output-git-pcf-pipelines

              ']
          path: /bin/bash
      task: prepare-git-pcf-pipelines-bit-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-git-nsx-t-ci-pipeline}
        outputs:
        - {name: output-git-nsx-t-ci-pipeline}
        platform: linux
        run:
          args: [-ec, 'cd input-git-nsx-t-ci-pipeline

              tar cfz ../output-git-nsx-t-ci-pipeline/nsx-t-ci-pipeline-tarball.tgz
              .

              cd ..

              ls -l output-git-nsx-t-ci-pipeline

              ']
          path: /bin/bash
      task: prepare-git-nsx-t-ci-pipeline-bit-to-export
    - config:
        image_resource:
          source: {repository: czero/cflinuxfs2}
          type: docker-image
        inputs:
        - {name: input-pivnet-non-tile-pcf-ops-manager}
        outputs:
        - {name: output-pivnet-non-tile-pcf-ops-manager}
        params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
        platform: linux
        run:
          args: [-ec, 'echo \"Copying pcf-ops-manager bits\"

              rm input-pivnet-non-tile-pcf-ops-manager/version input-pivnet-non-tile-pcf-ops-manager/metadata*

              file_name=$(ls input-pivnet-non-tile-pcf-ops-manager/)

              mv input-pivnet-non-tile-pcf-ops-manager/* output-pivnet-non-tile-pcf-ops-manager/pcf-ops-manager-pivnet-non-tile-${file_name}

              ls -l output-pivnet-non-tile-pcf-ops-manager/

              ']
          path: /bin/bash
      task: prepare-pcf-ops-manager-pivnet-non-tile-bit-to-export
    - config:
        image_resource:
          source: {repository: czero/cflinuxfs2}
          type: docker-image
        inputs:
        - {name: input-tile-pivotal-container-service}
        outputs:
        - {name: output-tile-pivotal-container-service}
        - {name: output-tile-stemcell-pivotal-container-service}
        params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
        platform: linux
        run:
          args: [-ec, "echo \"Copying pivotal-container-service tile bits\"\nTILE_DIRECTORY_PATH=./input-tile-pivotal-container-service\n\
              TILE_FILE_PATH=`find $TILE_DIRECTORY_PATH -name *.pivotal | sort | head\
              \ -1`\ntile_metadata=$(unzip -l $TILE_FILE_PATH | grep \"metadata\"\
              \ | grep \"ml$\" | awk '{print $NF}' );\nstemcell_version_reqd=$(unzip\
              \ -p $TILE_FILE_PATH $tile_metadata | grep -A5 \"stemcell_criteria:\"\
              \ | grep \"version:\"  | grep -Ei \"[0-9]{2,}\" | awk '{print $NF}'\
              \ | sed -e \"s/'//g;s/\\\"//g\"  );\nstemcell_os_from_tile=$(unzip -p\
              \ $TILE_FILE_PATH $tile_metadata | grep -A5 \"stemcell_criteria:\" |\
              \ grep \"os:\" | awk '{print $NF}' | sed \"s/'//g;s/\\\"//g\" );\n\n\
              if [[ \"$stemcell_os_from_tile\" =~ \"trusty\" ]]; then\n  product_slug=\"\
              stemcells\"\nelif [[ \"$stemcell_os_from_tile\" =~ \"xenial\" ]]; then\n\
              \  product_slug=\"stemcells-ubuntu-xenial\"\nfi\n\nif [ \"$stemcell_version_reqd\"\
              \ != \"\" ]; then\n  pivnet-cli login --api-token=$PIVNET_API_TOKEN\n\
              \  pivnet-cli download-product-files -p \"$product_slug\" -r $stemcell_version_reqd\
              \ -g \"*${IAAS}*\" --accept-eula\n  if [ $? != 0 ]; then\n   min_version=$(echo\
              \ $stemcell_version_reqd | awk -F '.' '{print $2}')\n   if [ \"$min_version\"\
              \ == \"\" ]; then\n     for min_version in $(seq 100 -1 0)\n     do\n\
              \        pivnet-cli download-product-files -p \"$product_slug\" -r $stemcell_version_reqd.$min_version\
              \ -g \"*${IAAS}*\" --accept-eula && break\n     done\n   else\n    \
              \ echo \"Stemcell version $stemcell_version_reqd not found !!, giving\
              \ up\"\n     exit 1\n   fi\n  fi\n\n  SC_FILE_PATH=`find ./ -name \"\
              bosh*.tgz\" | sort | tail -1 || true `;\n  if [ -f \"$SC_FILE_PATH\"\
              \ ]; then\n    echo \"Stemcell file found!\"\n  else\n    echo \"Stemcell\
              \ file not found!\";\n    exit 1;\n  fi\nfi\n\nif [ \"$SC_FILE_PATH\"\
              \ != \"\" ]; then\n  cp $SC_FILE_PATH input-tile-pivotal-container-service\n\
              fi\n\ncd input-tile-pivotal-container-service\ntar cfz ../output-tile-stemcell-pivotal-container-service/pivotal-container-service-tarball.tgz\
              \ \\\n      *.pivotal bosh*tgz || true\ncd ..\nmv $TILE_FILE_PATH output-tile-pivotal-container-service\n\
              ls -l output-tile-pivotal-container-service/ output-tile-stemcell-pivotal-container-service/\n"]
          path: /bin/bash
      task: prepare-tile-pivotal-container-service-bits-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-git-pcf-pipelines-utils}
        outputs:
        - {name: output-git-pcf-pipelines-utils}
        platform: linux
        run:
          args: [-ec, 'cd input-git-pcf-pipelines-utils

              tar cfz ../output-git-pcf-pipelines-utils/pcf-pipelines-utils-tarball.tgz
              .

              cd ..

              ls -l output-git-pcf-pipelines-utils

              ']
          path: /bin/bash
      task: prepare-git-pcf-pipelines-utils-bit-to-export
    - config:
        image_resource:
          source: {repository: czero/cflinuxfs2}
          type: docker-image
        inputs:
        - {name: input-tile-harbor-container-registry}
        outputs:
        - {name: output-tile-harbor-container-registry}
        - {name: output-tile-stemcell-harbor-container-registry}
        params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
        platform: linux
        run:
          args: [-ec, "echo \"Copying harbor-container-registry tile bits\"\nTILE_DIRECTORY_PATH=./input-tile-harbor-container-registry\n\
              TILE_FILE_PATH=`find $TILE_DIRECTORY_PATH -name *.pivotal | sort | head\
              \ -1`\ntile_metadata=$(unzip -l $TILE_FILE_PATH | grep \"metadata\"\
              \ | grep \"ml$\" | awk '{print $NF}' );\nstemcell_version_reqd=$(unzip\
              \ -p $TILE_FILE_PATH $tile_metadata | grep -A5 \"stemcell_criteria:\"\
              \ | grep \"version:\"  | grep -Ei \"[0-9]{2,}\" | awk '{print $NF}'\
              \ | sed -e \"s/'//g;s/\\\"//g\"  );\nstemcell_os_from_tile=$(unzip -p\
              \ $TILE_FILE_PATH $tile_metadata | grep -A5 \"stemcell_criteria:\" |\
              \ grep \"os:\" | awk '{print $NF}' | sed \"s/'//g;s/\\\"//g\" );\n\n\
              if [[ \"$stemcell_os_from_tile\" =~ \"trusty\" ]]; then\n  product_slug=\"\
              stemcells\"\nelif [[ \"$stemcell_os_from_tile\" =~ \"xenial\" ]]; then\n\
              \  product_slug=\"stemcells-ubuntu-xenial\"\nfi\n\nif [ \"$stemcell_version_reqd\"\
              \ != \"\" ]; then\n  pivnet-cli login --api-token=$PIVNET_API_TOKEN\n\
              \  pivnet-cli download-product-files -p \"$product_slug\" -r $stemcell_version_reqd\
              \ -g \"*${IAAS}*\" --accept-eula\n  if [ $? != 0 ]; then\n   min_version=$(echo\
              \ $stemcell_version_reqd | awk -F '.' '{print $2}')\n   if [ \"$min_version\"\
              \ == \"\" ]; then\n     for min_version in $(seq 100 -1 0)\n     do\n\
              \        pivnet-cli download-product-files -p \"$product_slug\" -r $stemcell_version_reqd.$min_version\
              \ -g \"*${IAAS}*\" --accept-eula && break\n     done\n   else\n    \
              \ echo \"Stemcell version $stemcell_version_reqd not found !!, giving\
              \ up\"\n     exit 1\n   fi\n  fi\n\n  SC_FILE_PATH=`find ./ -name \"\
              bosh*.tgz\" | sort | tail -1 || true `;\n  if [ -f \"$SC_FILE_PATH\"\
              \ ]; then\n    echo \"Stemcell file found!\"\n  else\n    echo \"Stemcell\
              \ file not found!\";\n    exit 1;\n  fi\nfi\n\nif [ \"$SC_FILE_PATH\"\
              \ != \"\" ]; then\n  cp $SC_FILE_PATH input-tile-harbor-container-registry\n\
              fi\n\ncd input-tile-harbor-container-registry\ntar cfz ../output-tile-stemcell-harbor-container-registry/harbor-container-registry-tarball.tgz\
              \ \\\n      *.pivotal bosh*tgz || true\ncd ..\nmv $TILE_FILE_PATH output-tile-harbor-container-registry\n\
              ls -l output-tile-harbor-container-registry/ output-tile-stemcell-harbor-container-registry/\n"]
          path: /bin/bash
      task: prepare-tile-harbor-container-registry-bits-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-docker-pcfnorm-rootfs-1.0.17-docker}
        outputs:
        - {name: output-docker-pcfnorm-rootfs-1.0.17-docker}
        platform: linux
        run:
          args: [-ec, 'echo "Exporting pcfnorm-rootfs-1.0.17-docker docker image";

              mkdir export-directory;

              cd export-directory;

              cp ../input-docker-pcfnorm-rootfs-1.0.17-docker/metadata.json .;

              mkdir rootfs && cd rootfs;

              cp ../../input-docker-pcfnorm-rootfs-1.0.17-docker/rootfs.tar ..;

              tar -xf ../rootfs.tar --exclude="dev/*";

              echo "Packaging pcfnorm-rootfs-1.0.17-docker docker image";

              cd ..;

              rm rootfs.tar;

              tar -czf   "../output-docker-pcfnorm-rootfs-1.0.17-docker/pcfnorm-rootfs-1.0.17-docker-latest-docker.tgz"
              .;

              ls -l ../output-docker-pcfnorm-rootfs-1.0.17-docker/;

              ']
          path: /bin/bash
      task: prepare-pcfnorm-rootfs-1.0.17-docker-docker-image-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-docker-czero-cflinuxfs2-latest-docker}
        outputs:
        - {name: output-docker-czero-cflinuxfs2-latest-docker}
        platform: linux
        run:
          args: [-ec, 'echo "Exporting czero-cflinuxfs2-latest-docker docker image";

              mkdir export-directory;

              cd export-directory;

              cp ../input-docker-czero-cflinuxfs2-latest-docker/metadata.json .;

              mkdir rootfs && cd rootfs;

              cp ../../input-docker-czero-cflinuxfs2-latest-docker/rootfs.tar ..;

              tar -xf ../rootfs.tar --exclude="dev/*";

              echo "Packaging czero-cflinuxfs2-latest-docker docker image";

              cd ..;

              rm rootfs.tar;

              tar -czf   "../output-docker-czero-cflinuxfs2-latest-docker/czero-cflinuxfs2-latest-docker-latest-docker.tgz"
              .;

              ls -l ../output-docker-czero-cflinuxfs2-latest-docker/;

              ']
          path: /bin/bash
      task: prepare-czero-cflinuxfs2-latest-docker-docker-image-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-docker-czero-rootfs-latest-docker}
        outputs:
        - {name: output-docker-czero-rootfs-latest-docker}
        platform: linux
        run:
          args: [-ec, 'echo "Exporting czero-rootfs-latest-docker docker image";

              mkdir export-directory;

              cd export-directory;

              cp ../input-docker-czero-rootfs-latest-docker/metadata.json .;

              mkdir rootfs && cd rootfs;

              cp ../../input-docker-czero-rootfs-latest-docker/rootfs.tar ..;

              tar -xf ../rootfs.tar --exclude="dev/*";

              echo "Packaging czero-rootfs-latest-docker docker image";

              cd ..;

              rm rootfs.tar;

              tar -czf   "../output-docker-czero-rootfs-latest-docker/czero-rootfs-latest-docker-latest-docker.tgz"
              .;

              ls -l ../output-docker-czero-rootfs-latest-docker/;

              ']
          path: /bin/bash
      task: prepare-czero-rootfs-latest-docker-docker-image-to-export
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-docker-pivotalservices-pks-kubectl-latest-docker}
        outputs:
        - {name: output-docker-pivotalservices-pks-kubectl-latest-docker}
        platform: linux
        run:
          args: [-ec, 'echo "Exporting pivotalservices-pks-kubectl-latest-docker docker
              image";

              mkdir export-directory;

              cd export-directory;

              cp ../input-docker-pivotalservices-pks-kubectl-latest-docker/metadata.json
              .;

              mkdir rootfs && cd rootfs;

              cp ../../input-docker-pivotalservices-pks-kubectl-latest-docker/rootfs.tar
              ..;

              tar -xf ../rootfs.tar --exclude="dev/*";

              echo "Packaging pivotalservices-pks-kubectl-latest-docker docker image";

              cd ..;

              rm rootfs.tar;

              tar -czf   "../output-docker-pivotalservices-pks-kubectl-latest-docker/pivotalservices-pks-kubectl-latest-docker-latest-docker.tgz"
              .;

              ls -l ../output-docker-pivotalservices-pks-kubectl-latest-docker/;

              ']
          path: /bin/bash
      task: prepare-pivotalservices-pks-kubectl-latest-docker-docker-image-to-export
  - aggregate:
    - params: {file: output-git-pcf-pipelines/pcf-pipelines-tarball.tgz}
      put: output-git-pcf-pipelines
    - params: {file: output-git-nsx-t-ci-pipeline/nsx-t-ci-pipeline-tarball.tgz}
      put: output-git-nsx-t-ci-pipeline
    - params: {file: output-pivnet-non-tile-pcf-ops-manager/pcf-ops-manager-pivnet-non-tile-*}
      put: output-pivnet-non-tile-pcf-ops-manager
    - params: {file: output-tile-pivotal-container-service/*.pivotal}
      put: output-tile-pivotal-container-service
    - params: {file: output-tile-stemcell-pivotal-container-service/pivotal-container-service-*.tgz}
      put: output-tile-stemcell-pivotal-container-service
    - params: {file: output-git-pcf-pipelines-utils/pcf-pipelines-utils-tarball.tgz}
      put: output-git-pcf-pipelines-utils
    - params: {file: output-tile-harbor-container-registry/*.pivotal}
      put: output-tile-harbor-container-registry
    - params: {file: output-tile-stemcell-harbor-container-registry/harbor-container-registry-*.tgz}
      put: output-tile-stemcell-harbor-container-registry
    - params: {file: output-docker-pcfnorm-rootfs-1.0.17-docker/pcfnorm-rootfs-1.0.17-docker*.tgz}
      put: output-docker-pcfnorm-rootfs-1.0.17-docker
    - params: {file: output-docker-czero-cflinuxfs2-latest-docker/czero-cflinuxfs2-latest-docker*.tgz}
      put: output-docker-czero-cflinuxfs2-latest-docker
    - params: {file: output-docker-czero-rootfs-latest-docker/czero-rootfs-latest-docker*.tgz}
      put: output-docker-czero-rootfs-latest-docker
    - params: {file: output-docker-pivotalservices-pks-kubectl-latest-docker/pivotalservices-pks-kubectl-latest-docker*.tgz}
      put: output-docker-pivotalservices-pks-kubectl-latest-docker
- name: kickoff-pcf-pipelines-upload-to-blobstore
  plan:
  - get: input-git-pcf-pipelines
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-git-pcf-pipelines}
      outputs:
      - {name: output-git-pcf-pipelines}
      platform: linux
      run:
        args: [-ec, 'cd input-git-pcf-pipelines

            tar cfz ../output-git-pcf-pipelines/pcf-pipelines-tarball.tgz .

            cd ..

            ls -l output-git-pcf-pipelines

            ']
        path: /bin/bash
    task: prepare-git-pcf-pipelines-bit-to-export
  - params: {file: output-git-pcf-pipelines/pcf-pipelines-tarball.tgz}
    put: output-git-pcf-pipelines
- name: kickoff-nsx-t-ci-pipeline-upload-to-blobstore
  plan:
  - get: input-git-nsx-t-ci-pipeline
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-git-nsx-t-ci-pipeline}
      outputs:
      - {name: output-git-nsx-t-ci-pipeline}
      platform: linux
      run:
        args: [-ec, 'cd input-git-nsx-t-ci-pipeline

            tar cfz ../output-git-nsx-t-ci-pipeline/nsx-t-ci-pipeline-tarball.tgz
            .

            cd ..

            ls -l output-git-nsx-t-ci-pipeline

            ']
        path: /bin/bash
    task: prepare-git-nsx-t-ci-pipeline-bit-to-export
  - params: {file: output-git-nsx-t-ci-pipeline/nsx-t-ci-pipeline-tarball.tgz}
    put: output-git-nsx-t-ci-pipeline
- name: kickoff-pcf-ops-manager-upload-to-blobstore
  plan:
  - get: input-pivnet-non-tile-pcf-ops-manager
    params:
      globs: ['*((iaas))*']
  - config:
      image_resource:
        source: {repository: czero/cflinuxfs2}
        type: docker-image
      inputs:
      - {name: input-pivnet-non-tile-pcf-ops-manager}
      outputs:
      - {name: output-pivnet-non-tile-pcf-ops-manager}
      params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
      platform: linux
      run:
        args: [-ec, 'echo \"Copying pcf-ops-manager-pivnet-non-tile bits\"

            rm input-pivnet-non-tile-pcf-ops-manager/version input-pivnet-non-tile-pcf-ops-manager/metadata*

            file_name=$(ls input-pivnet-non-tile-pcf-ops-manager/)

            mv input-pivnet-non-tile-pcf-ops-manager/* output-pivnet-non-tile-pcf-ops-manager/pcf-ops-manager-pivnet-non-tile-${file_name}

            ls -l output-pivnet-non-tile-pcf-ops-manager/

            ']
        path: /bin/bash
    task: prepare-pcf-ops-manager-pivnet-non-tile-bit-to-export
  - params: {file: output-pivnet-non-tile-pcf-ops-manager/pcf-ops-manager-pivnet-non-tile-*}
    put: output-pivnet-non-tile-pcf-ops-manager
- name: kickoff-pivotal-container-service-upload-to-blobstore
  plan:
  - get: input-tile-pivotal-container-service
    params:
      globs: ['*.pivotal']
  - config:
      image_resource:
        source: {repository: czero/cflinuxfs2}
        type: docker-image
      inputs:
      - {name: input-tile-pivotal-container-service}
      outputs:
      - {name: output-tile-pivotal-container-service}
      - {name: output-tile-stemcell-pivotal-container-service}
      params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
      platform: linux
      run:
        args: [-ec, "echo \"Copying pivotal-container-service tile bits\"\nTILE_DIRECTORY_PATH=./input-tile-pivotal-container-service\n\
            TILE_FILE_PATH=`find $TILE_DIRECTORY_PATH -name *.pivotal | sort | head\
            \ -1`\ntile_metadata=$(unzip -l $TILE_FILE_PATH | grep \"metadata\" |\
            \ grep \"ml$\" | awk '{print $NF}' );\nstemcell_version_reqd=$(unzip -p\
            \ $TILE_FILE_PATH $tile_metadata | grep -A4 \"stemcell_criteria:\" | grep\
            \ \"version:\"  | grep -Ei \"[0-9]{2,}\" | awk '{print $NF}' | sed -e\
            \ \"s/'//g;s/\\\"//g\"  );\nif [ \"$stemcell_version_reqd\" != \"\" ];\
            \ then\n  pivnet-cli login --api-token=$PIVNET_API_TOKEN\n  pivnet-cli\
            \ download-product-files -p \"stemcells\" -r $stemcell_version_reqd -g\
            \ \"*${IAAS}*\" --accept-eula\n  if [ $? != 0 ]; then\n   min_version=$(echo\
            \ $stemcell_version_reqd | awk -F '.' '{print $2}')\n   major_version=$(echo\
            \ $stemcell_version_reqd | awk -F '.' '{print $1}')\n   if [ \"$min_version\"\
            \ == \"\" ]; then\n     for min_version in $(seq 100 -1 0)\n     do\n\
            \        pivnet-cli download-product-files -p \"stemcells\" -r $major_version.$min_version\
            \ -g \"*${IAAS}*\" --accept-eula && break\n     done\n   else\n     echo\
            \ \"Stemcell version $stemcell_version_reqd not found !!, giving up\"\n\
            \     exit 1\n   fi\n  fi\n  SC_FILE_PATH=`find ./ -name \"bosh*.tgz\"\
            \ | sort | tail -1`;\n  if [ -f \"$SC_FILE_PATH\" ]; then\n    echo \"\
            Stemcell file found!\"\n  else\n    echo \"Stemcell file not found!\"\
            ;\n    exit 1;\n  fi\nfi\n\nif [ \"$SC_FILE_PATH\" != \"\" ]; then\n \
            \ cp $SC_FILE_PATH input-tile-pivotal-container-service\nfi\n\ncd input-tile-pivotal-container-service\n\
            tar cfz ../output-tile-stemcell-pivotal-container-service/pivotal-container-service-tarball.tgz\
            \ \\\n      *.pivotal bosh*tgz || true\ncd ..\nmv $TILE_FILE_PATH output-tile-pivotal-container-service\n\
            ls -l output-tile-pivotal-container-service/ output-tile-stemcell-pivotal-container-service/\n"]
        path: /bin/bash
    task: prepare-tile-pivotal-container-service-bits-to-export
  - params: {file: output-tile-pivotal-container-service/*.pivotal}
    put: output-tile-pivotal-container-service
  - params: {file: output-tile-stemcell-pivotal-container-service/pivotal-container-service-*.tgz}
    put: output-tile-stemcell-pivotal-container-service
- name: kickoff-pcf-pipelines-utils-upload-to-blobstore
  plan:
  - get: input-git-pcf-pipelines-utils
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-git-pcf-pipelines-utils}
      outputs:
      - {name: output-git-pcf-pipelines-utils}
      platform: linux
      run:
        args: [-ec, 'cd input-git-pcf-pipelines-utils

            tar cfz ../output-git-pcf-pipelines-utils/pcf-pipelines-utils-tarball.tgz
            .

            cd ..

            ls -l output-git-pcf-pipelines-utils

            ']
        path: /bin/bash
    task: prepare-git-pcf-pipelines-utils-bit-to-export
  - params: {file: output-git-pcf-pipelines-utils/pcf-pipelines-utils-tarball.tgz}
    put: output-git-pcf-pipelines-utils
- name: kickoff-harbor-container-registry-upload-to-blobstore
  plan:
  - get: input-tile-harbor-container-registry
    params:
      globs: ['*.pivotal']
  - config:
      image_resource:
        source: {repository: czero/cflinuxfs2}
        type: docker-image
      inputs:
      - {name: input-tile-harbor-container-registry}
      outputs:
      - {name: output-tile-harbor-container-registry}
      - {name: output-tile-stemcell-harbor-container-registry}
      params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
      platform: linux
      run:
        args: [-ec, "echo \"Copying harbor-container-registry tile bits\"\nTILE_DIRECTORY_PATH=./input-tile-harbor-container-registry\n\
            TILE_FILE_PATH=`find $TILE_DIRECTORY_PATH -name *.pivotal | sort | head\
            \ -1`\ntile_metadata=$(unzip -l $TILE_FILE_PATH | grep \"metadata\" |\
            \ grep \"ml$\" | awk '{print $NF}' );\nstemcell_version_reqd=$(unzip -p\
            \ $TILE_FILE_PATH $tile_metadata | grep -A4 \"stemcell_criteria:\" | grep\
            \ \"version:\"  | grep -Ei \"[0-9]{2,}\" | awk '{print $NF}' | sed -e\
            \ \"s/'//g;s/\\\"//g\"  );\nif [ \"$stemcell_version_reqd\" != \"\" ];\
            \ then\n  pivnet-cli login --api-token=$PIVNET_API_TOKEN\n  pivnet-cli\
            \ download-product-files -p \"stemcells\" -r $stemcell_version_reqd -g\
            \ \"*${IAAS}*\" --accept-eula\n  if [ $? != 0 ]; then\n   min_version=$(echo\
            \ $stemcell_version_reqd | awk -F '.' '{print $2}')\n   major_version=$(echo\
            \ $stemcell_version_reqd | awk -F '.' '{print $1}')\n   if [ \"$min_version\"\
            \ == \"\" ]; then\n     for min_version in $(seq 100 -1 0)\n     do\n\
            \        pivnet-cli download-product-files -p \"stemcells\" -r $major_version.$min_version\
            \ -g \"*${IAAS}*\" --accept-eula && break\n     done\n   else\n     echo\
            \ \"Stemcell version $stemcell_version_reqd not found !!, giving up\"\n\
            \     exit 1\n   fi\n  fi\n  SC_FILE_PATH=`find ./ -name \"bosh*.tgz\"\
            \ | sort | tail -1`;\n  if [ -f \"$SC_FILE_PATH\" ]; then\n    echo \"\
            Stemcell file found!\"\n  else\n    echo \"Stemcell file not found!\"\
            ;\n    exit 1;\n  fi\nfi\n\nif [ \"$SC_FILE_PATH\" != \"\" ]; then\n \
            \ cp $SC_FILE_PATH input-tile-harbor-container-registry\nfi\n\ncd input-tile-harbor-container-registry\n\
            tar cfz ../output-tile-stemcell-harbor-container-registry/harbor-container-registry-tarball.tgz\
            \ \\\n      *.pivotal bosh*tgz || true\ncd ..\nmv $TILE_FILE_PATH output-tile-harbor-container-registry\n\
            ls -l output-tile-harbor-container-registry/ output-tile-stemcell-harbor-container-registry/\n"]
        path: /bin/bash
    task: prepare-tile-harbor-container-registry-bits-to-export
  - params: {file: output-tile-harbor-container-registry/*.pivotal}
    put: output-tile-harbor-container-registry
  - params: {file: output-tile-stemcell-harbor-container-registry/harbor-container-registry-*.tgz}
    put: output-tile-stemcell-harbor-container-registry
- name: kickoff-pcfnorm-rootfs-1.0.17-docker-upload-to-blobstore
  plan:
  - get: input-docker-pcfnorm-rootfs-1.0.17-docker
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-docker-pcfnorm-rootfs-1.0.17-docker}
      outputs:
      - {name: output-docker-pcfnorm-rootfs-1.0.17-docker}
      platform: linux
      run:
        args: [-ec, 'echo "Exporting pcfnorm-rootfs-1.0.17-docker docker image";

            mkdir export-directory;

            cd export-directory;

            cp ../input-docker-pcfnorm-rootfs-1.0.17-docker/metadata.json .;

            mkdir rootfs && cd rootfs;

            cp ../../input-docker-pcfnorm-rootfs-1.0.17-docker/rootfs.tar ..;

            tar -xf ../rootfs.tar --exclude="dev/*";

            echo "Packaging pcfnorm-rootfs-1.0.17-docker docker image";

            cd ..;

            rm rootfs.tar;

            tar -czf   "../output-docker-pcfnorm-rootfs-1.0.17-docker/pcfnorm-rootfs-1.0.17-docker-latest-docker.tgz"
            .;

            ls -l ../output-docker-pcfnorm-rootfs-1.0.17-docker/;

            ']
        path: /bin/bash
    task: prepare-pcfnorm-rootfs-1.0.17-docker-docker-image-to-export
  - params: {file: output-docker-pcfnorm-rootfs-1.0.17-docker/pcfnorm-rootfs-1.0.17-docker*}
    put: output-docker-pcfnorm-rootfs-1.0.17-docker
- name: kickoff-czero-cflinuxfs2-latest-docker-upload-to-blobstore
  plan:
  - get: input-docker-czero-cflinuxfs2-latest-docker
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-docker-czero-cflinuxfs2-latest-docker}
      outputs:
      - {name: output-docker-czero-cflinuxfs2-latest-docker}
      platform: linux
      run:
        args: [-ec, 'echo "Exporting czero-cflinuxfs2-latest-docker docker image";

            mkdir export-directory;

            cd export-directory;

            cp ../input-docker-czero-cflinuxfs2-latest-docker/metadata.json .;

            mkdir rootfs && cd rootfs;

            cp ../../input-docker-czero-cflinuxfs2-latest-docker/rootfs.tar ..;

            tar -xf ../rootfs.tar --exclude="dev/*";

            echo "Packaging czero-cflinuxfs2-latest-docker docker image";

            cd ..;

            rm rootfs.tar;

            tar -czf   "../output-docker-czero-cflinuxfs2-latest-docker/czero-cflinuxfs2-latest-docker-latest-docker.tgz"
            .;

            ls -l ../output-docker-czero-cflinuxfs2-latest-docker/;

            ']
        path: /bin/bash
    task: prepare-czero-cflinuxfs2-latest-docker-docker-image-to-export
  - params: {file: output-docker-czero-cflinuxfs2-latest-docker/czero-cflinuxfs2-latest-docker*}
    put: output-docker-czero-cflinuxfs2-latest-docker
- name: kickoff-czero-rootfs-latest-docker-upload-to-blobstore
  plan:
  - get: input-docker-czero-rootfs-latest-docker
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-docker-czero-rootfs-latest-docker}
      outputs:
      - {name: output-docker-czero-rootfs-latest-docker}
      platform: linux
      run:
        args: [-ec, 'echo "Exporting czero-rootfs-latest-docker docker image";

            mkdir export-directory;

            cd export-directory;

            cp ../input-docker-czero-rootfs-latest-docker/metadata.json .;

            mkdir rootfs && cd rootfs;

            cp ../../input-docker-czero-rootfs-latest-docker/rootfs.tar ..;

            tar -xf ../rootfs.tar --exclude="dev/*";

            echo "Packaging czero-rootfs-latest-docker docker image";

            cd ..;

            rm rootfs.tar;

            tar -czf   "../output-docker-czero-rootfs-latest-docker/czero-rootfs-latest-docker-latest-docker.tgz"
            .;

            ls -l ../output-docker-czero-rootfs-latest-docker/;

            ']
        path: /bin/bash
    task: prepare-czero-rootfs-latest-docker-docker-image-to-export
  - params: {file: output-docker-czero-rootfs-latest-docker/czero-rootfs-latest-docker*}
    put: output-docker-czero-rootfs-latest-docker
- name: kickoff-pivotalservices-pks-kubectl-latest-docker-upload-to-blobstore
  plan:
  - get: input-docker-pivotalservices-pks-kubectl-latest-docker
    params: {rootfs: true}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-docker-pivotalservices-pks-kubectl-latest-docker}
      outputs:
      - {name: output-docker-pivotalservices-pks-kubectl-latest-docker}
      platform: linux
      run:
        args: [-ec, 'echo "Exporting pivotalservices-pks-kubectl-latest-docker docker
            image";

            mkdir export-directory;

            cd export-directory;

            cp ../input-docker-pivotalservices-pks-kubectl-latest-docker/metadata.json
            .;

            mkdir rootfs && cd rootfs;

            cp ../../input-docker-pivotalservices-pks-kubectl-latest-docker/rootfs.tar
            ..;

            tar -xf ../rootfs.tar --exclude="dev/*";

            echo "Packaging pivotalservices-pks-kubectl-latest-docker docker image";

            cd ..;

            rm rootfs.tar;

            tar -czf   "../output-docker-pivotalservices-pks-kubectl-latest-docker/pivotalservices-pks-kubectl-latest-docker-latest-docker.tgz"
            .;

            ls -l ../output-docker-pivotalservices-pks-kubectl-latest-docker/;

            ']
        path: /bin/bash
    task: prepare-pivotalservices-pks-kubectl-latest-docker-docker-image-to-export
  - params: {file: output-docker-pivotalservices-pks-kubectl-latest-docker/pivotalservices-pks-kubectl-latest-docker*}
    put: output-docker-pivotalservices-pks-kubectl-latest-docker
resource_types:
- name: pivnet
  source: {repository: pivotalcf/pivnet-resource, tag: latest-final}
  type: docker-image
resources:
- name: input-git-pcf-pipelines
  source: {branch: master, uri: 'https://github.com/pivotal-cf/pcf-pipelines.git'}
  type: git
- name: input-git-nsx-t-ci-pipeline
  source: {branch: nsxt-2.1, uri: 'https://github.com/sparameswaran/nsx-t-ci-pipeline.git'}
  type: git
- name: input-pivnet-non-tile-pcf-ops-manager
  source: {api_token: ((pivnet_token)), product_slug: ops-manager, product_version: ((opsman_major_minor_version)),
    sort_by: semver}
  type: pivnet
- name: input-tile-pivotal-container-service
  source: {api_token: ((pivnet_token)), product_slug: pivotal-container-service, product_version: ((pks_major_minor_version)),
    sort_by: semver}
  type: pivnet
- name: input-git-pcf-pipelines-utils
  source: {uri: 'https://github.com/pivotalservices/concourse-pipeline-samples.git'}
  type: git
- name: input-tile-harbor-container-registry
  source: {api_token: ((pivnet_token)), product_slug: harbor-container-registry, product_version: ((harbor_product_version)),
    sort_by: semver}
  type: pivnet
- name: input-docker-pcfnorm-rootfs-1.0.17-docker
  source: {repository: pcfnorm/rootfs, tag: latest}
  type: docker-image
- name: input-docker-czero-cflinuxfs2-latest-docker
  source: {repository: czero/cflinuxfs2, tag: latest}
  type: docker-image
- name: input-docker-czero-rootfs-latest-docker
  source: {repository: czero/rootfs, tag: latest}
  type: docker-image
- name: input-docker-pivotalservices-pks-kubectl-latest-docker
  source: {repository: pivotalservices/pks-kubectl, tag: latest}
  type: docker-image
- name: output-git-pcf-pipelines
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/git/pcf-pipelines-tar(.*).tgz,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-git-nsx-t-ci-pipeline
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/git/nsx-t-ci-pipeline-tar(.*).tgz,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-pivnet-non-tile-pcf-ops-manager
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/pivnet-non-tile/pcf-ops-manager-(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-tile-pivotal-container-service
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/pivnet-tile/pivotal-container-service/(.*).pivotal,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-tile-stemcell-pivotal-container-service
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/pivnet-tile/pivotal-container-service-tarball/pivotal-container-service-(.*).tgz,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-git-pcf-pipelines-utils
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/git/pcf-pipelines-utils-tar(.*).tgz,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-tile-harbor-container-registry
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/pivnet-tile/harbor-container-registry/(.*).pivotal,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-tile-stemcell-harbor-container-registry
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/pivnet-tile/harbor-container-registry-tarball/harbor-container-registry-(.*).tgz,
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-docker-pcfnorm-rootfs-1.0.17-docker
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/docker/pcfnorm-rootfs-1.0.17-docker.(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-docker-czero-cflinuxfs2-latest-docker
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/docker/czero-cflinuxfs2-latest-docker.(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-docker-czero-rootfs-latest-docker
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/docker/czero-rootfs-latest-docker.(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
- name: output-docker-pivotalservices-pks-kubectl-latest-docker
  source: {access_key_id: ((final_s3_access_key_id)), bucket: ((final_s3_bucket)),
    endpoint: ((final_s3_endpoint)), regexp: ((offline_run_id))/resources/docker/pivotalservices-pks-kubectl-latest-docker.(.*),
    secret_access_key: ((final_s3_secret_access_key))}
  type: s3
