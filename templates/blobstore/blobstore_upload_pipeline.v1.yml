groups:
- name: parallel-kickoff
  jobs:
  - parallel-kickoff
- name: individual-kickoff
  jobs:
  {% for resource in resources %}
  - kickoff-{{ resource['name'] }}-upload-to-blobstore
  {% endfor %}


resource_types: {{ source_resource_types }}

jobs:
- name: parallel-kickoff
  plan:
  - aggregate:
    {% for resource in final_input_resources %}
    {% if 'offline-gen-' not in resource['name'] %}
    - get: {{resource['name']}}
    {% if resource['base_type'] == 'tile' %}
      params: {globs: ["*.pivotal"]}
    {% elif resource['base_type'] == 'pivnet-non-tile' %}
      params: {globs: ["*((iaas))*"]}
    {% elif resource['base_type'] == 'docker' %}
      params: {rootfs: true}
    {% endif %}
    {% endif %}
    {% endfor %}

  - aggregate:

  {% for resource in resources %}
    {% if resource['base_type'] == 'docker' %}
    - config:
        image_resource:
          source: {repository: ubuntu }
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        platform: linux
        run:
          args:
            - -ec
            - |
                echo "Exporting {{ resource['name'] }} docker image";
                mkdir export-directory;
                cd export-directory;
                cp ../input-{{ resource['base_type'] }}-{{ resource['name'] }}/metadata.json .;
                mkdir rootfs && cd rootfs;
                cp ../../input-{{ resource['base_type'] }}-{{ resource['name'] }}/rootfs.tar ..;
                tar -xf ../rootfs.tar --exclude="dev/*";
                echo "Packaging {{ resource['name'] }} docker image";
                cd ..;
                rm rootfs.tar;
                tar -czf   "../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['tag'] }}-docker.tgz" .;
                ls -l ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/;
          path: /bin/bash
      task: prepare-{{ resource['name'] }}-docker-image-to-export
    {% elif resource['type'] == 'git' %}
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        platform: linux
        run:
          args:
          - -ec
          - |
              cd input-{{ resource['base_type'] }}-{{ resource['name'] }}
              tar cfz ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz .
              cd ..
              ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}
          path: /bin/bash
      task: prepare-{{ resource['base_type'] }}-{{ resource['name'] }}-bit-to-export

    {% elif resource['base_type'] == 'pivnet-non-tile' %}
    - config:
        image_resource:
          source: {repository: czero/cflinuxfs2}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }

        platform: linux
        run:
          args:
          - -ec
          - |
              echo \"Copying {{ resource['name'] }} bits\"
              rm input-{{ resource['base_type'] }}-{{ resource['name'] }}/version input-{{ resource['base_type'] }}-{{ resource['name'] }}/metadata*
              file_name=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }}/)
              mv input-{{ resource['base_type'] }}-{{ resource['name'] }}/* output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['base_type'] }}-${file_name}
              ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}/
          path: /bin/bash
      task: prepare-{{ resource['name'] }}-{{ resource['base_type'] }}-bit-to-export
    {% elif resource['base_type'] == 'tile' %}
    - config:
        image_resource:
          source: {repository: czero/cflinuxfs2}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        - {name: output-tile-stemcell-{{ resource['name'] }} }
        params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
        platform: linux
        run:
          args:
          - -ec
          - |
              echo "Copying {{ resource['name'] }} tile bits"
              TILE_DIRECTORY_PATH=./input-{{ resource['base_type'] }}-{{ resource['name'] }}
              TILE_FILE_PATH=`find $TILE_DIRECTORY_PATH -name *.pivotal | sort | head -1`
              tile_metadata=$(unzip -l $TILE_FILE_PATH | grep "metadata" | grep "ml$" | awk '{print $NF}' );
              stemcell_version_reqd=$(unzip -p $TILE_FILE_PATH $tile_metadata | grep -A4 s"stemcell_criteria:" | grep "version:"  | grep -Ei "[0-9]{2,}" | awk '{print $NF}' | sed -e "s/'//g"  );
              if [ "$stemcell_version_reqd" != "" ]; then
                pivnet-cli login --api-token=$PIVNET_API_TOKEN
                pivnet-cli download-product-files -p "stemcells" -r $stemcell_version_reqd -g "*${IAAS}*" --accept-eula
                if [ $? != 0 ]; then
                 min_version=$(echo $stemcell_version_reqd | awk -F '.' '{print $2}')
                 if [ "$min_version" == "" ]; then
                   for min_version in $(seq 0  100)
                   do
                      pivnet-cli download-product-files -p "stemcells" -r $stemcell_version_reqd.$min_version -g "*${IAAS}*" --accept-eula && break
                   done
                 else
                   echo "Stemcell version $stemcell_version_reqd not found !!, giving up"
                   exit 1
                 fi
                fi

                SC_FILE_PATH=`find ./ -name bosh*.tgz`;
                if [ -f "$SC_FILE_PATH" ]; then
                  echo "Stemcell file found!"
                else
                  echo "Stemcell file not found!";
                  exit 1;
                fi
              fi

              if [ "$SC_FILE_PATH" != "" ]; then
                cp $SC_FILE_PATH input-{{ resource['base_type'] }}-{{ resource['name'] }}
              fi

              cd input-{{ resource['base_type'] }}-{{ resource['name'] }}
              tar cfz ../output-tile-stemcell-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz \
                    *.pivotal bosh*tgz || true
              cd ..
              mv $TILE_FILE_PATH output-{{ resource['base_type'] }}-{{ resource['name'] }}
              ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}/ output-tile-stemcell-{{ resource['name'] }}/
          path: /bin/bash
      task: prepare-{{ resource['base_type'] }}-{{ resource['name'] }}-bits-to-export
    {% else %}
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        platform: linux
        run:
          args:
            - -ec
            - |
                echo "Copying {{ resource['name'] }} bits";
                no_of_entries=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }} | wc -l)
                if [ $no_of_entries -ne 1 ]; then
                  cd input-{{ resource['base_type'] }}-{{ resource['name'] }};
                  tar cfz ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball-1.0.tgz .
                  cd ..
                else
                  file_name=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }}/)
                  mv input-{{ resource['base_type'] }}-{{ resource['name'] }}/* output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-${file_name}-1.0
                fi
                ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}
          path: /bin/bash
      task: prepare-{{ resource['name'] }}-bit-to-export
    {% endif %}
    {% for plan in resource['plan'] %}
      {% if plan.get('config') is not none %}
    - {{ plan }}
      {% endif %}
    {% endfor %}
  {% endfor %}

  - aggregate:
    {% for resource in resources %}
    - put: output-{{ resource['base_type'] }}-{{resource['name']}}

      {% if resource['base_type'] == 'docker' %}
      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}*.tgz }

      {% elif resource['base_type'] == 'git' %}

      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz }

      {% elif resource['base_type'] == 'tile' %}

      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/*.pivotal }
    - put: output-tile-stemcell-{{ resource['name'] }}
      params: { file: output-tile-stemcell-{{ resource['name'] }}/{{ resource['name'] }}-*.tgz }

      {% elif resource['base_type'] == 'pivnet-non-tile' %}
      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['base_type'] }}-* }

      {% else %}
      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}*-1.0* }

      {% endif %}
    {% endfor %}


# Individual Job Kickoffs


  {% for resource in resources %}
- name: kickoff-{{resource['name']}}-upload-to-blobstore
  plan:
  - get: input-{{resource['base_type']}}-{{resource['name']}}
  {% if resource['base_type'] == 'tile' %}
    params: {globs: ["*.pivotal"]}
  {% elif resource['base_type'] == 'pivnet-non-tile' %}
    params: {globs: ["*((iaas))*"]}
  {% elif resource['base_type'] == 'docker' %}
    params: {rootfs: true}
  {% elif resource['base_type'] == 'git' %}
    params: {rootfs: true}
  {% endif %}
  {% if resource['base_type'] == 'docker' %}
  - config:
      image_resource:
        source: {repository: ubuntu }
        type: docker-image
      inputs:
      - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
      outputs:
      - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
      platform: linux
      run:
        args:
          - -ec
          - |
              echo "Exporting {{ resource['name'] }} docker image";
              mkdir export-directory;
              cd export-directory;
              cp ../input-{{ resource['base_type'] }}-{{ resource['name'] }}/metadata.json .;
              mkdir rootfs && cd rootfs;
              cp ../../input-{{ resource['base_type'] }}-{{ resource['name'] }}/rootfs.tar ..;
              tar -xf ../rootfs.tar --exclude="dev/*";
              echo "Packaging {{ resource['name'] }} docker image";
              cd ..;
              rm rootfs.tar;
              tar -czf   "../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['tag'] }}-docker.tgz" .;
              ls -l ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/;
        path: /bin/bash
    task: prepare-{{ resource['name'] }}-docker-image-to-export
  {% elif resource['base_type'] == 'git' %}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
      outputs:
      - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
      platform: linux
      run:
        args:
        - -ec
        - |
            cd input-{{ resource['base_type'] }}-{{ resource['name'] }}
            tar cfz ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz .
            cd ..
            ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}
        path: /bin/bash
    task: prepare-{{ resource['base_type'] }}-{{ resource['name'] }}-bit-to-export

  {% elif resource['base_type'] == 'pivnet-non-tile' %}
  - config:
      image_resource:
        source: {repository: czero/cflinuxfs2}
        type: docker-image
      inputs:
      - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
      params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
      outputs:
      - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }

      platform: linux
      run:
        args:
        - -ec
        - |
            echo \"Copying {{ resource['name'] }}-{{ resource['base_type'] }} bits\"
            rm input-{{ resource['base_type'] }}-{{ resource['name'] }}/version input-{{ resource['base_type'] }}-{{ resource['name'] }}/metadata*
            file_name=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }}/)
            mv input-{{ resource['base_type'] }}-{{ resource['name'] }}/* output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['base_type'] }}-${file_name}
            ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}/
        path: /bin/bash
    task: prepare-{{ resource['name'] }}-{{ resource['base_type'] }}-bit-to-export
  {% elif resource['base_type'] == 'tile' %}
  - config:
      image_resource:
        source: {repository: czero/cflinuxfs2}
        type: docker-image
      inputs:
      - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
      outputs:
      - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
      - {name: output-tile-stemcell-{{ resource['name'] }} }
      params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
      platform: linux
      run:
        args:
        - -ec
        - |
            echo "Copying {{ resource['name'] }} tile bits"
            TILE_DIRECTORY_PATH=./input-{{ resource['base_type'] }}-{{ resource['name'] }}
            TILE_FILE_PATH=`find $TILE_DIRECTORY_PATH -name *.pivotal | sort | head -1`
            tile_metadata=$(unzip -l $TILE_FILE_PATH | grep "metadata" | grep "ml$" | awk '{print $NF}' );
            stemcell_version_reqd=$(unzip -p $TILE_FILE_PATH $tile_metadata | grep -A4 "stemcell_criteria:" | grep "version:"  | grep -Ei "[0-9]{2,}" | awk '{print $NF}' | sed -e "s/'//g"  );
            if [ "$stemcell_version_reqd" != "" ]; then
              pivnet-cli login --api-token=$PIVNET_API_TOKEN
              pivnet-cli download-product-files -p "stemcells" -r $stemcell_version_reqd -g "*${IAAS}*" --accept-eula
              if [ $? != 0 ]; then
               min_version=$(echo $stemcell_version_reqd | awk -F '.' '{print $2}')
               if [ "$min_version" == "" ]; then
                 for min_version in $(seq 0  100)
                 do
                    pivnet-cli download-product-files -p "stemcells" -r $stemcell_version_reqd.$min_version -g "*${IAAS}*" --accept-eula && break
                 done
               else
                 echo "Stemcell version $stemcell_version_reqd not found !!, giving up"
                 exit 1
               fi
              fi
              SC_FILE_PATH=`find ./ -name bosh*.tgz`;
              if [ -f "$SC_FILE_PATH" ]; then
                echo "Stemcell file found!"
              else
                echo "Stemcell file not found!";
                exit 1;
              fi
            fi

            if [ "$SC_FILE_PATH" != "" ]; then
              cp $SC_FILE_PATH input-{{ resource['base_type'] }}-{{ resource['name'] }}
            fi

            cd input-{{ resource['base_type'] }}-{{ resource['name'] }}
            tar cfz ../output-tile-stemcell-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz \
                  *.pivotal bosh*tgz || true
            cd ..
            mv $TILE_FILE_PATH output-{{ resource['base_type'] }}-{{ resource['name'] }}
            ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}/ output-tile-stemcell-{{ resource['name'] }}/

        path: /bin/bash
    task: prepare-{{ resource['base_type'] }}-{{ resource['name'] }}-bits-to-export
  {% else %}
  - config:
      image_resource:
        source: {repository: ubuntu}
        type: docker-image
      inputs:
      - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
      outputs:
      - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
      platform: linux
      run:
        args:
          - -ec
          - |
              echo "Copying {{ resource['name'] }} bits";
              no_of_entries=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }} | wc -l)
              if [ $no_of_entries -ne 1 ]; then
                cd input-{{ resource['base_type'] }}-{{ resource['name'] }};
                tar cfz ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball-1.0.tgz .
                cd ..
              else
                file_name=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }}/)
                mv input-{{ resource['base_type'] }}-{{ resource['name'] }}/* output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-${file_name}-1.0
              fi
              ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}
        path: /bin/bash
    task: prepare-{{ resource['name'] }}-bit-to-export
  {% endif %}
  - put: output-{{ resource['base_type'] }}-{{resource['name']}}

    {% if resource['base_type'] == 'docker' %}
    params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}* }

    {% elif resource['base_type'] == 'git' %}
    params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz }
    {% elif resource['base_type'] == 'tile' %}
    params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/*.pivotal }

  - put: output-tile-stemcell-{{ resource['name'] }}
    params: { file: output-tile-stemcell-{{ resource['name'] }}/{{ resource['name'] }}-*.tgz }

    {% elif resource['base_type'] == 'pivnet-non-tile' %}
    params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['base_type'] }}-* }

    {% else %}
    params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}*-1.0* }

    {% endif %}
  {% endfor %}


resources:
  {% for resource in final_input_resources %}
  {% if 'offline-gen-' not in resource['name'] %}
- name: {{ resource['name'] }}
  source: {{ resource['source'] }}
  type: {{ resource['type'] }}
  {% endif %}
  {% endfor %}
  {% for output_resource in final_output_resources %}
- name: {{ output_resource['name'] }}
  source: {{ output_resource['source'] }}
  type: s3
  {% endfor %}
