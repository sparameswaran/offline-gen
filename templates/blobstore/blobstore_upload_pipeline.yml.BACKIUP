groups:
- name: parallel-kickoff
  jobs:
  - parallel-kickoff
- name: individual-kickoff
  jobs:
  {% for resource_job in process_resource_jobs %}
  - {{ resource_job['name'] }}
  {% endfor %}

resource_types: {{ source_resource_types }}

jobs:
- name: parallel-kickoff
  plan:
  - aggregate:
    {% for resource in final_input_resources %}
    - get: {{resource['name']}}
    {% if resource['base_type'] == 'tile' %}
      params: {globs: ["*.pivotal"]}
    {% elif resource['base_type'] == 'pivnet-non-tile' %}
      params: {globs: ["*((iaas))*"]}
    {% elif resource['base_type'] == 'docker' %}
      params: {rootfs: true}
    {% endif %}
    {% endfor %}

  - aggregate:

    {% for resource in resources %}
      {% if resource['type'] == 'docker' %}

      {% elif resource['type'] == 's3' %}

      {% elif resource['type'] == 'git' %}

      {% elif resource['type'] == 'file' %}

      {% elif resource['type'] == 'pivnet_non_tile' %}

      {% elif resource['type'] == 'tile' %}

      {% endif %}
    {% endfor %}

    {% for plan in resource_job['plan'] %}
      {% if plan.get('config') is not none %}
    - {{ plan }}
      {% endif %}
    {% endfor %}
    {% endfor %}

  - aggregate:
    {% for resource in final_output_resources %}
    - {put: {{resource['name']}} }
    {% endfor %}



{% for resource_job in process_resource_jobs %}
- {{ resource_job }}
{% endfor %}


resources:
  {% for resource in final_input_resources %}
- name: {{ resource['name'] }}
  source: {{ resource['source'] }}
  type: {{ resource['type'] }}
  {% endfor %}
  {% for resource in final_output_resources %}
- name: {{ resource['name'] }}
  source:
    access_key_id: ((mini_access_id))
    bucket: ((mini_bucket))
    endpoint: ((mini_endpoint))
    secret_access_key: ((mini_access_key))
    regexp: {{ resource['regexp'] }}
  type: s3
  {% endfor %}
