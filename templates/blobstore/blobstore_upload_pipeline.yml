groups:
- name: parallel-kickoff
  jobs:
  - parallel-kickoff
- name: individual-kickoff
  jobs:
  {% for resource in resources %}
  - handle-{{ resource['name'] }}
  {% endfor %}
  # {% for resource_job in process_resource_jobs %}
  # - {{ resource_job['name'] }}
  # {% endfor %}

resource_types: {{ source_resource_types }}

jobs:
- name: parallel-kickoff
  plan:
  - aggregate:
    {% for resource in final_input_resources %}
    - get: {{resource['name']}}
    {% if resource['base_type'] == 'tile' %}
      params: {globs: ["*.pivotal"]}
    {% elif resource['base_type'] == 'pivnet-non-tile' %}
      params: {globs: ["*((iaas))*"]}
    {% elif resource['base_type'] == 'docker' %}
      params: {rootfs: true}
    {% endif %}
    {% endfor %}

  - aggregate:

  {% for resource in resources %}
    {% if resource['base_type'] == 'docker' %}
    - config:
        image_resource:
          source: {repository: ubuntu }
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        platform: linux
        run:
          args:
            - -exc
            - |
                echo "Exporting {{ resource['name'] }}-docker image"
                mkdir export-directory;
                cd export-directory;
                cp ../input-{{ resource['base_type'] }}-{{ resource['name'] }}/metadata.json .;
                mkdir rootfs && cd rootfs
                cp ../../input-{{ resource['base_type'] }}-{{ resource['name'] }}/rootfs.tar ..
                tar -xf ../rootfs.tar --exclude="dev/*"
                echo "Packaging {{ resource['name'] }} docker image"
                tmp_version="{{ resource['tag'] }}"
                tar -czf   "../../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-docker-${tmp_version}.tgz" .
                cd ..
                ls -l ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/'
          path: /bin/bash
      task: prepare-{{ resource['name'] }}-docker-image-to-export
    {% elif resource['type'] == 'git' %}
    - config:
        image_resource:
          source: {repository: nsxedgegen/offline-gen-worker}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        - {name: offline-gen-repo-converter}
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        - {name: output-docker-images-{{ resource['name'] }}}
        platform: linux
        run:
          args:
          - -exc
          - |
              echo "Searching for docker images within tasks of nsxt-ansible resource"
              cd input-{{ resource['base_type'] }}-{{ resource['name'] }}
              PIPELINE_REPO_CONVERTER=$(find .. -name "pipeline_repo_converter*.py")
              python $PIPELINE_REPO_CONVERTER . "{{task_list}}" "{{blobstore_source}}" \
                 ../output-docker-images-{{ resource['name'] }}/{{ resource['name'] }}-docker-images.yml
              tar cfz ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz .
              cd ..
              ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }} output-docker-images-{{ resource['name'] }}
          path: /bin/bash
      task: prepare-{{ resource['base_type'] }}-{{ resource['name'] }}-bit-to-export
    {% elif resource['type'] == 'pivnet_non_tile' %}
    - config:
        image_resource:
          source: {repository: czero/cflinuxfs2}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }

        platform: linux
        run:
          args:
          - -exc
          - |
              echo \"Copying {{ resource['name'] }}-{{ resource['base_type'] }} bits\"
              rm input-{{ resource['base_type'] }}-{{ resource['name'] }}/version input-{{ resource['base_type'] }}-{{ resource['name'] }}/metadata*
              file_name=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }}/)
              mv input-{{ resource['base_type'] }}-{{ resource['name'] }}/* output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['base_type'] }}-${file_name}
              ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}/
          path: /bin/bash
      task: prepare-{{ resource['name'] }}-{{ resource['base_type'] }}-bit-to-export
    {% elif resource['type'] == 'tile' %}
    - config:
        image_resource:
          source: {repository: czero/cflinuxfs2}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        - {name: offline-gen-stemcell-downloader}
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        - {name: output-stemcell-{{ resource['name'] }} }
        params: {IAAS: ((iaas)), PIVNET_API_TOKEN: ((pivnet_token))}
        platform: linux
        run:
          args:
          - -exc
          - |
              echo "Copying {{ resource['name'] }} tile bits"
              OFFLINE_STEMCELL_DOWNLOADER=$(find . -name find_and_download_stemcell.sh)
              chmod +x $OFFLINE_STEMCELL_DOWNLOADER
              $OFFLINE_STEMCELL_DOWNLOADER ./input-{{ resource['base_type'] }}-{{ resource['name'] }}
              SC_FILE_PATH=`find ./ -name *.tgz`;
              if [ -f "$SC_FILE_PATH" ]; then
                echo "Stemcell file found!"
              else
                echo "Stemcell file not found!";
                exit 1;
              fi
              mv $TILE_FILE_PATH output-{{ resource['base_type'] }}-{{ resource['name'] }}
              mv $SC_FILE_PATH output-stemcell-{{ resource['name'] }}/
              ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}/ output-stemcell-{{ resource['name'] }}/
          path: /bin/bash
      task: prepare-{{ resource['base_type'] }}-{{ resource['name'] }}-bits-to-export
    {% else %}
    - config:
        image_resource:
          source: {repository: ubuntu}
          type: docker-image
        inputs:
        - {name: input-{{ resource['base_type'] }}-{{ resource['name'] }} }
        outputs:
        - {name: output-{{ resource['base_type'] }}-{{ resource['name'] }} }
        platform: linux
        run:
          args:
            - -exc
            - |
                echo "Copying {{ resource['name'] }} bits";
                no_of_entries=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }} | wc -l)
                if [ $no_of_entries -ne 1 ]; then
                  cd input-{{ resource['base_type'] }}-{{ resource['name'] }};
                  tar cfz ../output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball-1.0.tgz .
                  cd ..
                else
                  file_name=$(ls input-{{ resource['base_type'] }}-{{ resource['name'] }}/)
                  mv input-{{ resource['base_type'] }}-{{ resource['name'] }}/* output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-${file_name}-1.0
                fi
                ls -l output-{{ resource['base_type'] }}-{{ resource['name'] }}
          path: /bin/bash
      task: prepare-{{ resource['name'] }}-bit-to-export
    {% endif %}
    {% for plan in resource['plan'] %}
      {% if plan.get('config') is not none %}
    - {{ plan }}
      {% endif %}
    {% endfor %}
  {% endfor %}

  - aggregate:
    {% for resource in resources %}
    - put: output-{{ resource['base_type'] }}-{{resource['name']}}

      {% if resource['base_type'] == 'docker' %}
      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-docker*.tgz }

      {% elif resource['type'] == 'git' %}

      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-tarball.tgz }
    - put: output-git-docker-images-{{ resource['name'] }}
      params: { file: output-git-docker-images-{{ resource['name'] }}/{{ resource['name'] }}-docker-images.yml }

      {% elif resource['type'] == 'tile' %}
      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/*.pivotal }
    - put: output-stemcell-{{ resource['name'] }}
      params: { file: output-stemcell-{{ resource['name'] }}/bosh-*.tgz }

      {% elif resource['type'] == 'pivnet_non_tile' %}
      params: { file: output-{{ resource['base_type'] }}-{{ resource['name'] }}/{{ resource['name'] }}-{{ resource['base_type'] }}-* }

      {% else %}
      params: { file: output-{{ resource['name'] }}-{{ resource['base_type'] }}/(({{ resource['name'] }}))*-1.0* }

      {% endif %}
    {% endfor %}


#
# {% for resource_job in process_resource_jobs %}
# - {{ resource_job }}
# {% endfor %}


resources:
  {% for resource in final_input_resources %}
- name: {{ resource['name'] }}
  source: {{ resource['source'] }}
  type: {{ resource['type'] }}
  {% endfor %}
  {% for resource in final_output_resources %}
- name: {{ resource['name'] }}
  source:
    access_key_id: ((mini_access_id))
    bucket: ((mini_bucket))
    endpoint: ((mini_endpoint))
    secret_access_key: ((mini_access_key))
    regexp: {{ resource['regexp'] }}
  type: s3
  {% endfor %}
